<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_ArgumentDateTimeOutOfRangeUnixTimestamp" xml:space="preserve">
    <value>DateTime value can't be before Unix Epoch (1 Jan 1970 00:00:00 UTC) and after Unix Millenium (19 January 2038 03:14:07 UTC) </value>
  </data>
  <data name="Exception_ArgumentIsEmpty" xml:space="preserve">
    <value>Argument is empty</value>
  </data>
  <data name="Exception_ArgumentIsNotDefinedInEnum" xml:space="preserve">
    <value>The value of '{0}' argument is not a valid value of the enumeration type '{1}'</value>
  </data>
  <data name="Exception_ArgumentIsNull" xml:space="preserve">
    <value>Argument is null</value>
  </data>
  <data name="Exception_ArgumentMinIdGreaterThanMaxId" xml:space="preserve">
    <value>MinDocumentId property value must be less or equal to MaxDocumentId property value</value>
  </data>
  <data name="Exception_ArgumentMustBeGreaterOrEqual" xml:space="preserve">
    <value>Argument must be greater than or equal to {0}</value>
  </data>
  <data name="Exception_ArgumentMustBeGreaterThan" xml:space="preserve">
    <value>Argument must be greater than {0}</value>
  </data>
  <data name="Exception_ArgumentMustBeInRange" xml:space="preserve">
    <value>Argument must be in range {0} to {1}</value>
  </data>
  <data name="Exception_ArgumentMustBeLessOrEqual" xml:space="preserve">
    <value>Argument must be less than or equal to {0}</value>
  </data>
  <data name="Exception_ArgumentMustBeLessThan" xml:space="preserve">
    <value>Argument must be less than {0}</value>
  </data>
  <data name="Exception_ArgumentResultsSortModeNotValid" xml:space="preserve">
    <value>SortBy property can not be empty in selected sorting mode '{0}'</value>
  </data>
  <data name="Exception_BinaryFormatNotSupported" xml:space="preserve">
    <value>Specified binary format type '{0}' is unknown or not supported</value>
  </data>
  <data name="Exception_CantReadFromStream" xml:space="preserve">
    <value>Input stream does not supports reading operations</value>
  </data>
  <data name="Exception_CantWriteToStream" xml:space="preserve">
    <value>Output stream does not supports writing operations</value>
  </data>
  <data name="Exception_CouldNotReadFromStream" xml:space="preserve">
    <value>Unable to read from stream. Requested {0} bytes, actually received {1} bytes</value>
  </data>
  <data name="Exception_InvalidServerResponseLength" xml:space="preserve">
    <value>Invalid server response length: {0}</value>
  </data>
  <data name="Exception_IOStreamDisposed" xml:space="preserve">
    <value>Stream object is null</value>
  </data>
  <data name="Exception_NetworkConnectionIsUnavailable" xml:space="preserve">
    <value>Underlying network connection was closed or timed out</value>
  </data>
  <data name="Exception_ProtocolVersionNotSupported" xml:space="preserve">
    <value>Unsupported Sphinx server protocol version {1}, expected version {0} or higher</value>
  </data>
  <data name="Exception_QueryError" xml:space="preserve">
    <value>Sphinx server returned error status for query. Server message: '{0}'</value>
  </data>
  <data name="Exception_ServerError" xml:space="preserve">
    <value>Sphinx server returned error, message: '{0}'</value>
  </data>
  <data name="Exception_TemproraryServerError" xml:space="preserve">
    <value>Temporary server error. Please try again later. 
Server message: '{0}'.</value>
  </data>
  <data name="Exception_UnknowStatusCode" xml:space="preserve">
    <value>Sphinx server returned unknown status code: {0}</value>
  </data>
  <data name="Exception_UnsupportedAttributeType" xml:space="preserve">
    <value>Unsupported attribute type '{0}'</value>
  </data>
  <data name="Warning_CommandVersion" xml:space="preserve">
    <value>Sphinx server command version {0}.{1} older than version {2}.{3} supported by client, some features might not work as expected</value>
  </data>
  <data name="Exception_ArgumentUnixTimestampOutOfRange" xml:space="preserve">
    <value>Unix timestamp value is out of range (signed int)</value>
  </data>
  <data name="Exception_CouldNotUpdateIndexAttributeValues" xml:space="preserve">
    <value>Could not update attribute values in specified index list. Server returned updated documents count: {0}</value>
  </data>
  <data name="Exception_CouldNotFlushIndexAttributeValues" xml:space="preserve">
    <value>Could not flush attribute values. Server returned negative flash tag value: {0}</value>
  </data>
</root>